#include<iostream>
#include<vector>
using namespace std;
void Merge(vector<int>& nums, int start, int mid, int end) {
	vector<int> tt(end-start+1,0);
	int index = 0;
	int p1 = start;
	int p2 = mid;
	while (p1 < mid && p2 <= end) {
		if (nums[p1] <= nums[p2]) {
			tt[index++] = nums[p1++];
		}
		else {
			tt[index++] = nums[p2++];
		}
	}
	while (p1 < mid) {
		tt[index++] = nums[p1++];
	}
	while (p2 <= end) {
		tt[index++] = nums[p2++];
	}
	for (int i = 0; i < end - start + 1; i++) {
		nums[start + i] = tt[i];
	}
}
void MergeSort_core(vector<int>&nums, int start, int end) {
	if (start < end) {
		int mid = (start + end) / 2+1;
		MergeSort_core(nums, start, mid-1);
		MergeSort_core(nums, mid, end);
		Merge(nums, start, mid, end);
	}
}
void MergeSort(vector<int> &nums) {
	int start = 0;
	int end = nums.size() - 1;
	MergeSort_core(nums, start, end);
}
int main() {
	vector<int> nums = { 17,1,3,4,56,32,11,67,89,54,33,22,4 };
	MergeSort(nums);
	for (auto i : nums) {
		cout << i << " ";
	}
}
